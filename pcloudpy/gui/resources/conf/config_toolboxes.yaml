Import Data:

    XYZ File:
        type: reader
        name: XYZ File 
        message: Open XYZ File 
        format: "*.xyz;;*.txt"
        func: ReaderXYZ
        enabled: 1
        text : "**Open XYZ File**"
        
    LAS File:
        type: reader
        name: LAS File
        message: Open LAS File 
        format: "*.las"
        func: ReaderLAS
        enabled: 1
        text : "**Open LAS File**"
     
    VTK File:
        type: reader
        name: VTK File
        format: .vtp
        message: Open VTP File 
        format: "*.vtp"
        func: ReaderVTP
        enabled: 1
        text : "Open VTP File"
        
    PLY File:
        type: reader
        name: PLY File
        format: "*.ply"
        message: Open PLY File
        func: ReaderPLY
        enabled: 1
        text : "Open PLY File"
        
    TIFF File:
        type: reader
        name: TIFF File
        format: "*.tif;; *.tiff"
        message: Open TIFF File
        func: ReaderTIFF
        enabled: 1
        text : "Open TIFF File"
           
Filters:

    Statistical Outlier Removal Filter:
        type: filter
        enabled: 1
        name: Statistical-Outlier-Removal-Filter
        parms:
            mean_k:
                type: "SpinBox"
                values: "1, 200, 5, 1"
                tooltip: |
                    Set the number of nearest neighbors to use for mean distance estimation.

            std_dev:
                type: "DoubleSpinBox"
                values: "0, 20, 1, 1"
                tooltip: |
                    Set the standard deviation multiplier for the distance threshold calculation.
                    The distance threshold will be equal to: mean + std_dev * std.
                    Points will be classified as inlier or outlier if their average neighbor distance is below or above this threshold respectively.

            
        text : |
                
                **Statistical Outlier Removal Filter** uses point neighborhood statistics to filter outlier data.
                The algorithm iterates through the entire input twice:
                
                - During the first iteration it will update the average distance that each point has to its nearest k neighbors. The value of k can be set using mean-k. 
                  Next, the mean and standard deviation of all these distances are computed in order to determine a distance threshold. 
                  The distance threshold will be equal to: mean + std_dev * std. The multiplier for the standard deviation can be set using std_dev_mult.
                
                - During the next iteration the points will be classified as inlier or outlier if their average neighbor distance is below or above this threshold respectively

                **mean_k**:
                    Set the number of nearest neighbors to use for mean distance estimation.

                **std_dev**:
                    Set the standard deviation multiplier for the distance threshold calculation.
                    The distance threshold will be equal to: mean + std_dev_mult * std.
                    Points will be classified as inlier or outlier if their average neighbor distance is below or above this threshold respectively.

                
                For more information.

                Statistical Outlier Removal Filter is a python implementation based on the pcl::StatisticalOutlierRemoval from Point Cloud Library
                class pcl::StatisticalOutlierRemoval (Radu Bogdan Rusu)

                R. B. Rusu, Z. C. Marton, N. Blodow, M. Dolha, and M. Beetz.
                Towards 3D Point Cloud Based Object Maps for Household Environments Robotics and Autonomous Systems Journal (Special Issue on Semantic Knowledge), 2008.

        func: StatisticalOutlierRemovalFilter
        
       
    Extract Extent Filter:
        type: filter
        enabled: 1
        name: Extract-Extent-Filter
        parms:
            extent:
                type: "Extent"
        text : |
            **Extract Extent Filter** uses a given extent to retrieve the points inside it.
        
        func: ExtractPolyData
        
     
        
    Delaunay 2D:
        type: filter
        name: Delaunay2D 
        enabled: 1
        parms:
            alpha:
                type: "DoubleSpinBox"
                values: "0, 10000, 1, 1"
                tooltip: |
                    Specify alpha (or distance) value to control output of this filter.
                    For a non-zero alpha value, only edges or triangles contained within a sphere centered at mesh vertices will be output.
                    Otherwise, only triangles will be output.
            tolerance:
                type: "DoubleSpinBox"
                values: "0.01, 10, 0.01, 0.01"
                tooltip: |
                    Specify a tolerance to control discarding of closely spaced points.
                    This tolerance is specified as a fraction of the diagonal length of the bounding box of the points.
            
        text : |
            **Delaunay2D** is a filter that constructs a 2D Delaunay triangulation from a list of input points.
            see vtkDelaunay2D Documentation.

            The output of the filter is a polygonal dataset. Usually the output is a triangle mesh,
            but if a non-zero alpha distance value is specified (called the "alpha" value), then only triangles, edges, and vertices laying within the alpha radius are output.
            In other words, non-zero alpha values may result in arbitrary combinations of triangles, lines, and vertices.
            (The notion of alpha value is derived from Edelsbrunner's work on "alpha shapes".)

            **alpha**:
                Specify alpha (or distance) value to control output of this filter.
                For a non-zero alpha value, only edges or triangles contained within a sphere centered at mesh vertices will be output.
                Otherwise, only triangles will be output.

            **tolerance**:
                Specify a tolerance to control discarding of closely spaced points. This tolerance is specified as a fraction of the diagonal length of the bounding box of the points

            The 2D Delaunay triangulation is defined as the triangulation that satisfies the Delaunay criterion for n-dimensional simplexes
            (in this case n=2 and the simplexes are triangles).
            This criterion states that a circumsphere of each simplex in a triangulation contains only the n+1 defining points of the simplex.
            (See "The Visualization Toolkit" text for more information.)
            In two dimensions, this translates into an optimal triangulation.
            That is, the maximum interior angle of any triangle is less than or equal to that of any possible triangulation.

            The Delaunay triangulation can be numerically sensitive in some cases.
            To prevent problems, try to avoid injecting points that will result in triangles with bad aspect ratios (1000:1 or greater).
            In practice this means inserting points that are "widely dispersed", and enables smooth transition of triangle sizes throughout the mesh.
            (You may even want to add extra points to create a better point distribution.)
            If numerical problems are present, you will see a warning message to this effect at the end of the triangulation process.

            
        func: Delaunay2D 
            
    Delaunay 3D:
        type: filter
        name: Delaunay3D
        enabled: 1
        
        parms :
            alpha:
                type: "DoubleSpinBox"
                values: "0, 10000, 1, 1"
                tooltip: |
                    Specify alpha (or distance) value to control output of this filter.
                    For a non-zero alpha value, only verts, edges, faces, or tetra contained within the circumsphere (of radius alpha) will be output.
                    Otherwise, only tetrahedra will be output.
            tolerance:
                type: "DoubleSpinBox"
                values: "0.01, 10, 0.01, 0.01"
                tooltip: |
                    Specify a tolerance to control discarding of closely spaced points.
                    This tolerance is specified as a fraction of the diagonal length of the bounding box of the points

            
        text : |            
            **Delaunay3D** is a filter that constructs a 3D Delaunay triangulation from a list of input points.

            The output of the filter is an unstructured grid dataset.
            Usually the output is a tetrahedral mesh, but if a non-zero alpha distance value is specified (called the "alpha" value),
            then only tetrahedra, triangles, edges, and vertices laying within the alpha radius are output.
            In other words, non-zero alpha values may result in arbitrary combinations of tetrahedra, triangles, lines, and vertices.
            (The notion of alpha value is derived from Edelsbrunner's work on "alpha shapes".)
            Note that a modification to alpha shapes enables output of combinations of tetrahedra, triangles, lines, and/or verts
            (see the boolean ivars AlphaTets, AlphaTris, AlphaLines, AlphaVerts).

            **alpha**:
                Specify alpha (or distance) value to control output of this filter.
                For a non-zero alpha value, only verts, edges, faces, or tetra contained within the circumsphere (of radius alpha) will be output.
                Otherwise, only tetrahedra will be output.

            **tolerance**:
                Specify a tolerance to control discarding of closely spaced points. This tolerance is specified as a fraction of the diagonal length of the bounding box of the points

            The 3D Delaunay triangulation is defined as the triangulation that satisfies the Delaunay criterion for n-dimensional simplexes
            (in this case n=3 and the simplexes are tetrahedra).
            This criterion states that a circumsphere of each simplex in a triangulation contains only the n+1 defining points of the simplex.
            (See "The Visualization Toolkit" for more information.)
            While in two dimensions this translates into an "optimal" triangulation, this is not true in 3D, since a measurement for optimality in 3D is not agreed on.



        func: Delaunay3D

    Point Set Normals Estimation (vtkPointSetNormalsEstimation):
        type: filter
        name: vtkPointSetNormalsEstimation
        enabled: 1
        parms:
            number_neighbors:
                type: "SpinBox"
                values: "1, 100, 1, 1"

        text: |
            **vtkPointSetNormalEstimation** filter estimates normals of a point set using a local best fit plane.

            At every point in the point set, vtkPointSetNormalEstimation computes the best
            fit plane of the set of points within a specified radius of the point (or a fixed number of neighbors).

            The normal of this plane is used as an estimate of the normal of the surface that would go through
            the points.

            vtkPointSetNormalEstimation Class is a python implementation based on the version included in PointSetProcessing by
            David Doria, see (https://github.com/daviddoria/PointSetProcessing)

        func: vtkPointSetNormalsEstimation

    Normals Estimation:

        type: filter
        name: NormalsEstimation
        enabled: 1
        parms:
            number_neighbors:
                type: "SpinBox"
                values: "1,100,1,1"

        text: |
            **Normals Estimation** filter estimates normals of a point cloud using PCA Eigen method to fit plane

        func: NormalsEstimation

    Oriented Normals Estimation:

        type: filter
        name: OrientedNormalsEstimation
        enabled: 1
        parms:
            number_neighbors:
                type: "SpinBox"
                values: "1,100,1,1"

        text: |
            ** Oriented Normals Estimation** filter estimates normals of a point cloud using PCA Eigen method to fit plane and minimum spanning tree

        func: OrientedNormalsEstimation


    Point Set Outlier Estimation:
        type: filter
        name: vtkPointSetOutlierEstimation
        enabled: 1
        parms:
            percent_to_remove:
                type: "DoubleSpinBox"
                values: "0,1,0.1,0.1"
                tooltip: |
                    We sort these distances and keep points whose nearest point is in a certain percentile
                    of the entire point set.


        text: |
            Outlier Removal - vtkPointSetOutlierRemoval,
            Python implementation based on Point Set Processing for VTK by David Doria
            see:
                https://github.com/daviddoria/PointSetProcessing
                http://www.vtkjournal.org/browse/publication/708

            We take the simple definition of an outlier to be a point that is farther away from its nearest neighbor than
            expected. To implement this definition, for every point p in the point set, we compute the distance from p to
            the nearest point to p. We sort these distances and keep points whose nearest point is in a certain percentile
            of the entire point set.
            This parameter is specified by the user as **percent_to_remove**

        func: vtkPointSetOutlierEstimation



    Normals Visualization:
        type: display
        name: Normals Visualization
        enabled: 1
        text: Normal Vector Visualization. First, Normal estimation must be done
        func: DisplayNormals


Surface Reconstruction:

    Screened Poisson Reconstruction:
        type: filter
        name: ScreenedPoisson
        enabled: 1
        func: ScreenedPoisson
        parms:
            depth:
                type: "SpinBox"
                values: "2,16,1,8"
                tooltip: ""

            full_depth:
                type: "SpinBox"
                values: "2,16,1,5"
                tooltip: ""

            scale:
                type: "DoubleSpinBox"
                values: "0.1, 2.0, 0.1, 1.1"
                tooltip: ""

            samples_per_node:
                type: "SpinBox"
                values: "1,20,1,1"
                tooltip: ""

            cg_depth:
                type: "SpinBox"
                values: "0, 16, 1, 0"
                tooltip: ""

            enable_polygon_mesh:
                type: "CheckBox"
                values: "0"
                tooltip: ""

            enable_density:
                type: "CheckBox"
                values: "0"
                tooltip: ""

        text: |
            **Screened Poisson Surface Reconstruction** (Version 6.13)

            Requires Point Cloud with oriented normals

            more information, see:

                http://www.cs.jhu.edu/~misha/Code/PoissonRecon/Version6.13/
                https://github.com/mmolero/pypoisson

            **depth**:
                This integer is the maximum depth of the tree that will be used for surface reconstruction.
                Running at depth d corresponds to solving on a voxel grid whose resolution is no larger than 2^d x 2^d x 2^d.
                Note that since the reconstructor adapts the octree to the sampling density, the specified reconstruction depth is only an upper bound.
                The default value for this parameter is 8.

            **full_depth**:
                This integer specifies the depth beyond depth the octree will be adapted.
                At coarser depths, the octree will be complete, containing all 2^d x 2^d x 2^d nodes.
                The default value for this parameter is 5.

            **scale**:
                This floating point value specifies the ratio between the diameter of the cube used for reconstruction and the diameter of the samples' bounding cube.
                The default value is 1.1.

            **samples per node**:
                This floating point value specifies the minimum number of sample points that should fall within an octree node as the octree construction is adapted to sampling density.
                For noise-free samples, small values in the range [1.0 - 5.0] can be used.
                For more noisy samples, larger values in the range [15.0 - 20.0] may be needed to provide a smoother, noise-reduced, reconstruction.
                The default value is 1.0.

            **cg depth**:
                This integer is the depth up to which a conjugate-gradients solver will be used to solve the linear system.
                Beyond this depth Gauss-Seidel relaxation will be used.
                The default value for this parameter is 0.

            **enable polygon mesh**:
                Enabling this flag tells the reconstructor to output a polygon mesh (rather than triangulating the results of Marching Cubes).
                The default value for this parameter is False.

            **enable density**:
                Enabling this flag tells the reconstructor to output the estimated depth values of the iso-surface vertices
                The default value for this parameter is False.




